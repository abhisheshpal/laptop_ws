// Generated by gencpp from file trigger_sync/Event.msg
// DO NOT EDIT!


#ifndef TRIGGER_SYNC_MESSAGE_EVENT_H
#define TRIGGER_SYNC_MESSAGE_EVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trigger_sync
{
template <class ContainerAllocator>
struct Event_
{
  typedef Event_<ContainerAllocator> Type;

  Event_()
    : event_name()
    , local_request_time()
    , device_clock_id()
    , device_time()
    , local_clock_id()
    , local_receive_time()
    , corrected_local_time()
    , clock_skew(0.0)
    , min_transport_delay()  {
    }
  Event_(const ContainerAllocator& _alloc)
    : event_name(_alloc)
    , local_request_time()
    , device_clock_id(_alloc)
    , device_time()
    , local_clock_id(_alloc)
    , local_receive_time()
    , corrected_local_time()
    , clock_skew(0.0)
    , min_transport_delay()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _event_name_type;
  _event_name_type event_name;

   typedef ros::Time _local_request_time_type;
  _local_request_time_type local_request_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_clock_id_type;
  _device_clock_id_type device_clock_id;

   typedef ros::Time _device_time_type;
  _device_time_type device_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _local_clock_id_type;
  _local_clock_id_type local_clock_id;

   typedef ros::Time _local_receive_time_type;
  _local_receive_time_type local_receive_time;

   typedef ros::Time _corrected_local_time_type;
  _corrected_local_time_type corrected_local_time;

   typedef double _clock_skew_type;
  _clock_skew_type clock_skew;

   typedef ros::Duration _min_transport_delay_type;
  _min_transport_delay_type min_transport_delay;





  typedef boost::shared_ptr< ::trigger_sync::Event_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trigger_sync::Event_<ContainerAllocator> const> ConstPtr;

}; // struct Event_

typedef ::trigger_sync::Event_<std::allocator<void> > Event;

typedef boost::shared_ptr< ::trigger_sync::Event > EventPtr;
typedef boost::shared_ptr< ::trigger_sync::Event const> EventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trigger_sync::Event_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trigger_sync::Event_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace trigger_sync

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trigger_sync': ['/home/vigneshnuc/laptop_ws/src/Sensors/trigger_sync-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::trigger_sync::Event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trigger_sync::Event_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trigger_sync::Event_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trigger_sync::Event_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trigger_sync::Event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trigger_sync::Event_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trigger_sync::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bb8e8fc0642e70a90d298e9b70ba013";
  }

  static const char* value(const ::trigger_sync::Event_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bb8e8fc0642e70aULL;
  static const uint64_t static_value2 = 0x90d298e9b70ba013ULL;
};

template<class ContainerAllocator>
struct DataType< ::trigger_sync::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trigger_sync/Event";
  }

  static const char* value(const ::trigger_sync::Event_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trigger_sync::Event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  event_name\n\
time    local_request_time\n\
string  device_clock_id\n\
time    device_time\n\
string  local_clock_id\n\
time    local_receive_time\n\
time    corrected_local_time\n\
float64 clock_skew\n\
duration    min_transport_delay\n\
";
  }

  static const char* value(const ::trigger_sync::Event_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trigger_sync::Event_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event_name);
      stream.next(m.local_request_time);
      stream.next(m.device_clock_id);
      stream.next(m.device_time);
      stream.next(m.local_clock_id);
      stream.next(m.local_receive_time);
      stream.next(m.corrected_local_time);
      stream.next(m.clock_skew);
      stream.next(m.min_transport_delay);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Event_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trigger_sync::Event_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trigger_sync::Event_<ContainerAllocator>& v)
  {
    s << indent << "event_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.event_name);
    s << indent << "local_request_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.local_request_time);
    s << indent << "device_clock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device_clock_id);
    s << indent << "device_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.device_time);
    s << indent << "local_clock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.local_clock_id);
    s << indent << "local_receive_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.local_receive_time);
    s << indent << "corrected_local_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.corrected_local_time);
    s << indent << "clock_skew: ";
    Printer<double>::stream(s, indent + "  ", v.clock_skew);
    s << indent << "min_transport_delay: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.min_transport_delay);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIGGER_SYNC_MESSAGE_EVENT_H
